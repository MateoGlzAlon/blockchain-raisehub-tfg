name: Backend CI Pipeline

on:
  push:
    branches: ["main", "development"]  # Ejecutar el workflow en cada push a la rama main
  pull_request:
    branches: ["main"]  # Ejecutar el workflow en cada PR a la rama main

jobs:
  java-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Otorgar permisos de solo lectura al contenido del repositorio
    steps:
      - uses: actions/checkout@v4  # Clonar el c칩digo fuente
      - name: Set up JDK 17
        uses: actions/setup-java@v4  # Configurar Java 17
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582  # Configurar Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew  # Dar permisos de ejecuci칩n al script Gradle
      - name: Build with Gradle Wrapper
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}  # Configurar variable de entorno JWT_SECRET
        run: cd backend && ./gradlew build  # Construir el proyecto con Gradle
      - name: Run Tests with Gradle Wrapper
        run: cd backend && ./gradlew test  # Ejecutar test con Gradle

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582  # Enviar gr치fico de dependencias
        with:
          build-root-directory: backend 

  sonar-analysis:
    name: Build and analyze
    runs-on: ubuntu-latest
    needs: java-build  # Esperar a que termine el job java-build
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Give permissions to gradlew
        run: chmod +x backend/gradlew
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: cd backend && ./gradlew build sonar --info  # Construir y analizar con SonarQube

  docker-build:
    runs-on: ubuntu-latest
    needs: sonar-analysis  # Esperar a que el an치lisis de SonarQube se complete
    if: ${{ success() }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Get Quality Gate Status
        id: check_quality_gate
        run: |
          echo "Fetching SonarQube Quality Gate status..."
          RAW_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
          echo "Raw API Response: $RAW_RESPONSE"  # Debugging line
          QUALITY_GATE_STATUS=$(echo "$RAW_RESPONSE" | jq -r '.projectStatus.status' || echo "ERROR")
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          echo "status=$QUALITY_GATE_STATUS" >> $GITHUB_ENV
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      - name: Fail if Quality Gate Fails
        if: env.status != 'OK'
        run: |
          echo "Quality Gate failed. Aborting the build and push process."
          exit 1
      - name: Log in to Docker Hub
        if: env.status == 'OK'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - name: Define IMAGE_TAG
        if: env.status == 'OK'
        id: vars
        run: echo "IMAGE_TAG=$(date +'%d-%m-%Y_%H-%M')" >> $GITHUB_ENV
      - name: Build Docker Image
        if: env.status == 'OK'
        run: |
          docker build backend \
            --file backend/Dockerfile \
            --tag blockchain_raisehub_be:latest
      - name: Tag Docker Image
        if: env.status == 'OK'
        run: |
          docker tag blockchain_raisehub_be:latest ${{ secrets.DOCKER_USERNAME }}/blockchain_raisehub_backend:${{ env.IMAGE_TAG }}
          docker tag blockchain_raisehub_be:latest ${{ secrets.DOCKER_USERNAME }}/blockchain_raisehub_backend:latest
      - name: Push Docker Images
        if: env.status == 'OK'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/blockchain_raisehub_backend:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/blockchain_raisehub_backend:latest